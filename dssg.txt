Mira este es mi proyecto, tengo mi backend y frontend, sino que quisiera que verificaran que esta mal, que puede estar dando errores y demas cosas, tambien que se pued mejorr, la idea general es obviamente implementar las funciones del backend como el CRUD y demas y tambien algo que tu quieras, algo como innovador que se puedaimplementar, me gsutaria que me ayudaras
proyectoElectiva/
│
├── config/
│   └── connect-db.mjs                 # Configuración de MongoDB
│
├── controllers/
│   ├── controller-auth.mjs            # Lógica de autenticación
│   ├── controller-driver.mjs          # Lógica de conductores
│   └── controller-trips.mjs           # Lógica de viajes
│
├── middlewares/
│   ├── auth.mjs                       # Middleware de autenticación JWT
│   └── errorHandler.mjs               # Manejo centralizado de errores
│
├── models/
│   ├── Driver.mjs                     # Esquema de Conductor
│   └── Trip.mjs                       # Esquema de Viaje
│
├── routes/
│   ├── auth-routes.mjs                # Rutas de autenticación
│   ├── driver-routes.mjs              # Rutas de conductores
│   └── trip-routes.mjs                # Rutas de viajes
│
├── utils/
│   └── ratingCalculator.mjs           # Utilidades para ratings
│
├── .env                               # Variables de entorno
├── .gitignore                         # Archivos ignorados por Git
├── package.json                       # Dependencias del proyecto
├── server.mjs                         # Punto de entrada de la aplicación
│
├── DiagramaDeClases.png               # Diagrama de clases UML
├── DiagramaDeComponentes.png          # Diagrama de componentes
└── README.md                          # Documentación del proyecto
connect-db.mjs
import mongoose from "mongoose";

const URL = "mongodb+srv://admin:123@clustertest.zzdjvmf.mongodb.net/driver_trip_db";

const connectDB = async () => {
    try {
        await mongoose.connect(URL);
        console.log('MongoDB Connected to: driver_trip_db');
    } catch (error) {
        console.error('Error connecting to MongoDB:', error.message);
        process.exit(1);
    }
};

export default connectDB;

controllers/controller-auth.mjs
import { generateToken } from '../middlewares/auth.mjs';
import Driver from '../models/Driver.mjs';

// Login de conductor
export async function login(req, res) {
    try {
        const { email, license_number } = req.body;

        if (!email || !license_number) {
            return res.status(400).json({
                success: false,
                message: 'Email y número de licencia son obligatorios'
            });
        }

        const driver = await Driver.findOne({ email, license_number });

        if (!driver) {
            return res.status(401).json({
                success: false,
                message: 'Credenciales inválidas'
            });
        }

        
        const token = generateToken({ 
            id: driver._id.toString(), 
            email: driver.email,
            name: driver.name
        });

        res.status(200).json({
            success: true,
            message: 'Login exitoso',
            token,
            driver: {
                id: driver._id,
                name: driver.name,
                email: driver.email,
                phone: driver.phone,
                license_number: driver.license_number,
                rating: driver.rating,
                status: driver.status
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error en login',
            error: error.message
        });
    }
}

// Verificar token 
export async function verifyToken(req, res) {
    try {
        // El middleware ya verificó el token y agregó req.user
        const driver = await Driver.findById(req.user.id);
        
        if (!driver) {
            return res.status(404).json({
                success: false,
                message: 'Conductor no encontrado'
            });
        }

        res.status(200).json({
            success: true,
            message: 'Token válido',
            driver: {
                id: driver._id,
                name: driver.name,
                email: driver.email,
                phone: driver.phone,
                license_number: driver.license_number,
                rating: driver.rating,
                status: driver.status
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error al verificar token',
            error: error.message
        });
    }
}

//  OPCIONAL: Función de registro si quieres permitir auto-registro de conductores
export async function register(req, res) {
    try {
      const { name, email, phone, license_number, vehicle_type, vehicle_plate, vehicle_capacity } = req.body;
      
      // Validación
      if (!name || !email || !phone || !license_number) {
        return res.status(400).json({
          success: false,
          message: 'Todos los campos son obligatorios'
        });
      }
  
      // Verificar si ya existe
      const existingDriver = await Driver.findOne({
        $or: [{ email }, { license_number }]
      });
  
      if (existingDriver) {
        return res.status(400).json({
          success: false,
          message: 'El email o número de licencia ya están registrados'
        });
      }
  
      // Crear nuevo conductor
      const newDriver = new Driver({
        name,
        email,
        phone,
        license_number,
        vehicle_type,
        vehicle_plate,
        vehicle_capacity
      });
  
      const savedDriver = await newDriver.save();
  
      // Generar token
      const token = generateToken({
        id: savedDriver._id.toString(),
        email: savedDriver.email,
        name: savedDriver.name
      });
  
      res.status(201).json({
        success: true,
        message: 'Conductor registrado exitosamente',
        token,
        driver: {
          id: savedDriver._id,
          name: savedDriver.name,
          email: savedDriver.email,
          phone: savedDriver.phone,
          license_number: savedDriver.license_number,
          vehicle_type: savedDriver.vehicle_type,
          vehicle_plate: savedDriver.vehicle_plate,
          vehicle_capacity: savedDriver.vehicle_capacity
        }
      });
    } catch (error) {
      if (error.name === 'ValidationError') {
        return res.status(400).json({
          success: false,
          message: 'Error de validación',
          errors: Object.values(error.errors).map(err => err.message)
        });
      }
      res.status(500).json({
        success: false,
        message: 'Error al registrar conductor',
        error: error.message
      });
    }
  }
  

  controllers/controller-driver.mjs

import Driver from '../models/Driver.mjs';

// Obtener todos los conductores
async function findAll(req, res) {
    try {
        const drivers = await Driver.find();
        res.status(200).json({
            success: true,
            data: drivers,
            total: drivers.length
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error retrieving drivers",
            error: error.message
        });
    }
}

// Obtener conductor por ID
async function findById(req, res) {
    try {
        const driver = await Driver.findById(req.params.id);
        
        if (!driver) {
            return res.status(404).json({
                success: false,
                message: "Driver not found"
            });
        }
        
        res.status(200).json({
            success: true,
            data: driver
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error retrieving driver",
            error: error.message
        });
    }
}

// ✅ CORREGIDO: Crear conductor con validación y campos completos
async function save(req, res) {
    try {
        const { 
            name, 
            email, 
            phone, 
            license_number,
            vehicle_type,
            vehicle_plate,
            vehicle_capacity 
        } = req.body;
        
        // Validación de campos requeridos
        if (!name || !email || !phone || !license_number) {
            return res.status(400).json({
                success: false,
                message: "Name, email, phone and license_number are required"
            });
        }

        // Verificar si ya existe
        const existingDriver = await Driver.findOne({
            $or: [{ email }, { license_number: license_number.toUpperCase() }]
        });

        if (existingDriver) {
            return res.status(400).json({
                success: false,
                message: "Driver with this email or license number already exists"
            });
        }
        
        // Crear nuevo conductor con TODOS los campos
        const newDriver = new Driver({
            name: name.trim(),
            email: email.toLowerCase().trim(),
            phone: phone.trim(),
            license_number: license_number.toUpperCase().trim(),
            vehicle_type: vehicle_type || 'sedan',
            vehicle_plate: vehicle_plate ? vehicle_plate.toUpperCase().trim() : undefined,
            vehicle_capacity: vehicle_capacity || 4
        });
        
        const savedDriver = await newDriver.save();
        
        res.status(201).json({
            success: true,
            message: "Driver created successfully",
            data: savedDriver
        });
    } catch (error) {
        if (error.name === 'ValidationError') {
            return res.status(400).json({
                success: false,
                message: "Validation error",
                errors: Object.values(error.errors).map(err => err.message)
            });
        }
        
        if (error.code === 11000) {
            return res.status(400).json({
                success: false,
                message: "Driver with this email or license number already exists"
            });
        }
        
        res.status(500).json({
            success: false,
            message: "Error creating driver",
            error: error.message
        });
    }
}

// ✅ CORREGIDO: Actualizar con todos los campos
async function update(req, res) {
    try {
        const { 
            name, 
            email, 
            phone, 
            license_number, 
            rating, 
            status,
            vehicle_type,
            vehicle_plate,
            vehicle_capacity 
        } = req.body;
        
        // Preparar objeto de actualización solo con campos proporcionados
        const updateData = {};
        if (name) updateData.name = name.trim();
        if (email) updateData.email = email.toLowerCase().trim();
        if (phone) updateData.phone = phone.trim();
        if (license_number) updateData.license_number = license_number.toUpperCase().trim();
        if (rating !== undefined) updateData.rating = rating;
        if (status) updateData.status = status;
        if (vehicle_type) updateData.vehicle_type = vehicle_type;
        if (vehicle_plate) updateData.vehicle_plate = vehicle_plate.toUpperCase().trim();
        if (vehicle_capacity) updateData.vehicle_capacity = vehicle_capacity;
        
        const updatedDriver = await Driver.findByIdAndUpdate(
            req.params.id,
            updateData,
            { new: true, runValidators: true }
        );
        
        if (!updatedDriver) {
            return res.status(404).json({
                success: false,
                message: "Driver not found"
            });
        }
        
        res.status(200).json({
            success: true,
            message: "Driver updated successfully",
            data: updatedDriver
        });
    } catch (error) {
        if (error.name === 'ValidationError') {
            return res.status(400).json({
                success: false,
                message: "Validation error",
                errors: Object.values(error.errors).map(err => err.message)
            });
        }
        
        if (error.code === 11000) {
            return res.status(400).json({
                success: false,
                message: "Email or license number already exists"
            });
        }
        
        res.status(500).json({
            success: false,
            message: "Error updating driver",
            error: error.message
        });
    }
}

// Eliminar conductor
async function remove(req, res) {
    try {
        const deletedDriver = await Driver.findByIdAndDelete(req.params.id);
        
        if (!deletedDriver) {
            return res.status(404).json({
                success: false,
                message: "Driver not found"
            });
        }
        
        res.status(200).json({
            success: true,
            message: "Driver deleted successfully",
            data: deletedDriver
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error deleting driver",
            error: error.message
        });
    }
}

export {
    findAll,
    findById, remove, save,
    update
};

controllers/controller-trips.mjs

import Driver from '../models/Driver.mjs';
import Trip from '../models/Trip.mjs';
import { calculateAverageRating, validateRating } from '../utils/ratingCalculator.mjs';

// Obtener todos los viajes
async function findAll(req, res) {
    try {
        const { status, driver_id } = req.query;
        
        // Filtros opcionales
        const filter = {};
        if (status) filter.status = status;
        if (driver_id) filter.driver_id = driver_id;
        
        const trips = await Trip.find(filter)
            .populate('driver_id', 'name email phone rating license_number')
            .sort({ departure_time: -1 }); // Ordenar por fecha más reciente
        
        res.status(200).json({
            success: true,
            data: trips,
            total: trips.length
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error al obtener los viajes",
            error: error.message
        });
    }
}

// Obtener un viaje por ID
async function findById(req, res) {
    try {
        const trip = await Trip.findById(req.params.id)
            .populate('driver_id', 'name email phone rating license_number status');
        
        if (!trip) {
            return res.status(404).json({
                success: false,
                message: "Viaje no encontrado"
            });
        }
        
        res.status(200).json({
            success: true,
            data: trip
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error al obtener el viaje",
            error: error.message
        });
    }
}

// Crear un nuevo viaje
async function save(req, res) {
    try {
        const { 
            driver_id, 
            origin, 
            destination, 
            departure_time, 
            price, 
            available_seats,
            distance_km,
            duration_minutes
        } = req.body;
        
        // Verificar que el conductor existe
        const driver = await Driver.findById(driver_id);
        if (!driver) {
            return res.status(404).json({
                success: false,
                message: "Conductor no encontrado"
            });
        }
        
        // Verificar que el conductor esté disponible
        if (driver.status !== 'available') {
            return res.status(400).json({
                success: false,
                message: `El conductor no está disponible. Estado actual: ${driver.status}`
            });
        }
        
        // Crear el nuevo viaje
        const newTrip = new Trip({
            driver_id,
            origin,
            destination,
            departure_time,
            price,
            available_seats: available_seats || 4,
            distance_km,
            duration_minutes
        });
        
        const savedTrip = await newTrip.save();
        
        // Actualizar el estado del conductor a 'busy'
        driver.status = 'busy';
        await driver.save();
        
        // Incrementar el contador de viajes del conductor
        await driver.incrementTrips();
        
        const populatedTrip = await Trip.findById(savedTrip._id)
            .populate('driver_id', 'name email phone rating');
        
        res.status(201).json({
            success: true,
            message: "Viaje creado exitosamente",
            data: populatedTrip
        });
    } catch (error) {
        if (error.name === 'ValidationError') {
            return res.status(400).json({
                success: false,
                message: "Error de validación",
                errors: Object.values(error.errors).map(err => err.message)
            });
        }
        
        res.status(500).json({
            success: false,
            message: "Error al crear el viaje",
            error: error.message
        });
    }
}

// Actualizar un viaje
async function update(req, res) {
    try {
        const { 
            driver_id, 
            origin, 
            destination, 
            departure_time, 
            arrival_time, 
            price, 
            available_seats, 
            status,
            distance_km,
            duration_minutes
        } = req.body;
        
        // Buscar el viaje actual
        const currentTrip = await Trip.findById(req.params.id);
        if (!currentTrip) {
            return res.status(404).json({
                success: false,
                message: "Viaje no encontrado"
            });
        }
        
        // Si se cambia el conductor, verificar que existe
        if (driver_id && driver_id !== currentTrip.driver_id.toString()) {
            const newDriver = await Driver.findById(driver_id);
            if (!newDriver) {
                return res.status(404).json({
                    success: false,
                    message: "Nuevo conductor no encontrado"
                });
            }
        }
        
        // Actualizar el viaje
        const updatedTrip = await Trip.findByIdAndUpdate(
            req.params.id,
            { 
                driver_id, 
                origin, 
                destination, 
                departure_time, 
                arrival_time, 
                price, 
                available_seats, 
                status,
                distance_km,
                duration_minutes
            },
            { new: true, runValidators: true }
        ).populate('driver_id', 'name email phone rating');
        
        // Si el viaje se completó, actualizar el estado del conductor a 'available'
        if (status === 'completed') {
            const driver = await Driver.findById(updatedTrip.driver_id);
            if (driver) {
                driver.status = 'available';
                await driver.save();
            }
        }
        
        res.status(200).json({
            success: true,
            message: "Viaje actualizado exitosamente",
            data: updatedTrip
        });
    } catch (error) {
        if (error.name === 'ValidationError') {
            return res.status(400).json({
                success: false,
                message: "Error de validación",
                errors: Object.values(error.errors).map(err => err.message)
            });
        }
        
        res.status(500).json({
            success: false,
            message: "Error al actualizar el viaje",
            error: error.message
        });
    }
}

// Eliminar un viaje
async function remove(req, res) {
    try {
        const deletedTrip = await Trip.findByIdAndDelete(req.params.id);
        
        if (!deletedTrip) {
            return res.status(404).json({
                success: false,
                message: "Viaje no encontrado"
            });
        }
        
        // Si el viaje estaba en progreso, liberar al conductor
        if (deletedTrip.status === 'in_progress' || deletedTrip.status === 'scheduled') {
            const driver = await Driver.findById(deletedTrip.driver_id);
            if (driver && driver.status === 'busy') {
                driver.status = 'available';
                await driver.save();
            }
        }
        
        res.status(200).json({
            success: true,
            message: "Viaje eliminado exitosamente",
            data: deletedTrip
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error al eliminar el viaje",
            error: error.message
        });
    }
}

// Agregar un pasajero a un viaje
async function addPassenger(req, res) {
    try {
        const { name, phone, seats_reserved } = req.body;
        
        if (!name || !phone || !seats_reserved) {
            return res.status(400).json({
                success: false,
                message: "Nombre, teléfono y número de asientos son obligatorios"
            });
        }
        
        const trip = await Trip.findById(req.params.id);
        
        if (!trip) {
            return res.status(404).json({
                success: false,
                message: "Viaje no encontrado"
            });
        }
        
        if (trip.status !== 'scheduled') {
            return res.status(400).json({
                success: false,
                message: "Solo se pueden agregar pasajeros a viajes programados"
            });
        }
        
        // Usar el método del modelo para agregar pasajero
        await trip.addPassenger({ name, phone, seats_reserved });
        
        const updatedTrip = await Trip.findById(trip._id)
            .populate('driver_id', 'name email phone');
        
        res.status(200).json({
            success: true,
            message: "Pasajero agregado exitosamente",
            data: updatedTrip
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
}

// Calificar un viaje (actualiza el rating del conductor)
async function rateTrip(req, res) {
    try {
        const { rating } = req.body;
        
        // Validar el rating
        const validatedRating = validateRating(rating);
        
        const trip = await Trip.findById(req.params.id);
        
        if (!trip) {
            return res.status(404).json({
                success: false,
                message: "Viaje no encontrado"
            });
        }
        
        if (trip.status !== 'completed') {
            return res.status(400).json({
                success: false,
                message: "Solo se pueden calificar viajes completados"
            });
        }
        
        // Obtener el conductor
        const driver = await Driver.findById(trip.driver_id);
        
        if (!driver) {
            return res.status(404).json({
                success: false,
                message: "Conductor no encontrado"
            });
        }
        
        // Calcular nuevo rating del conductor
        // Fórmula: (rating_actual * total_viajes + nuevo_rating) / (total_viajes + 1)
        const currentTotal = driver.rating * Math.max(driver.total_trips - 1, 1);
        const newRating = calculateAverageRating([currentTotal, validatedRating]);
        
        driver.rating = newRating;
        await driver.save();
        
        res.status(200).json({
            success: true,
            message: "Viaje calificado exitosamente",
            data: {
                trip_id: trip._id,
                driver_id: driver._id,
                driver_name: driver.name,
                new_rating: newRating,
                rating_given: validatedRating
            }
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: error.message
        });
    }
}

// Obtener estadísticas de viajes
async function getStatistics(req, res) {
    try {
        const { driver_id } = req.query;
        
        const filter = driver_id ? { driver_id } : {};
        
        const totalTrips = await Trip.countDocuments(filter);
        const completedTrips = await Trip.countDocuments({ ...filter, status: 'completed' });
        const scheduledTrips = await Trip.countDocuments({ ...filter, status: 'scheduled' });
        const inProgressTrips = await Trip.countDocuments({ ...filter, status: 'in_progress' });
        const cancelledTrips = await Trip.countDocuments({ ...filter, status: 'cancelled' });
        
        // Calcular ingresos totales de viajes completados
        const revenueData = await Trip.aggregate([
            { $match: { ...filter, status: 'completed' } },
            { $group: { _id: null, totalRevenue: { $sum: '$price' } } }
        ]);
        
        const totalRevenue = revenueData.length > 0 ? revenueData[0].totalRevenue : 0;
        
        res.status(200).json({
            success: true,
            data: {
                total_trips: totalTrips,
                completed: completedTrips,
                scheduled: scheduledTrips,
                in_progress: inProgressTrips,
                cancelled: cancelledTrips,
                total_revenue: totalRevenue,
                completion_rate: totalTrips > 0 ? ((completedTrips / totalTrips) * 100).toFixed(2) + '%' : '0%'
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: "Error al obtener estadísticas",
            error: error.message
        });
    }
}

export {
    addPassenger, findAll,
    findById, getStatistics, rateTrip, remove, save,
    update
};


middlewares/auth.mjs

import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'secret-key';

export const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    if (!token) {
        return res.status(401).json({
            success: false,
            message: 'Access token required'
        });
    }
    
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        return res.status(403).json({
            success: false,
            message: 'Invalid or expired token'
        });
    }
};

export const generateToken = (payload) => {
    return jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });
};

middlewares/errorHandler.mjs

export const errorHandler = (err, req, res, next) => {
    console.error('Error:', err);
    
    res.status(err.status || 500).json({
        success: false,
        message: err.message || 'Internal server error',
        error: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
};

export const notFound = (req, res, next) => {
    res.status(404).json({
        success: false,
        message: `Route ${req.originalUrl} not found`
    });
};

models/Driver.mjs
import mongoose from 'mongoose';

const driverSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'El nombre es obligatorio'],
    trim: true,
    minlength: [3, 'El nombre debe tener al menos 3 caracteres']
  },
  email: {
    type: String,
    required: [true, 'El email es obligatorio'],
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\S+@\S+\.\S+$/, 'Por favor ingresa un email válido']
  },
  phone: {
    type: String,
    required: [true, 'El teléfono es obligatorio'],
    trim: true
  },
  license_number: {
    type: String,
    required: [true, 'El número de licencia es obligatorio'],
    unique: true,
    trim: true,
    uppercase: true
  },
  vehicle_type: {
    type: String,
    enum: ['sedan', 'suv', 'van', 'minibus'],
    default: 'sedan'
  },
  vehicle_plate: {
    type: String,
    trim: true,
    uppercase: true
  },
  vehicle_capacity: {
    type: Number,
    default: 4,
    min: 1,
    max: 20
  },
  rating: {
    type: Number,
    default: 5.0,
    min: 0,
    max: 5
  },
  status: {
    type: String,
    enum: ['available', 'busy', 'offline'],
    default: 'available'
  },
  total_trips: {
    type: Number,
    default: 0,
    min: 0
  }
}, {
  timestamps: true,
  versionKey: false
});

driverSchema.index({ email: 1 });
driverSchema.index({ license_number: 1 });

export default mongoose.model('Driver', driverSchema);
models/Trip.mjs

import mongoose from 'mongoose';

const tripSchema = new mongoose.Schema({
    driver_id: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Driver',
        required: [true, 'El ID del conductor es obligatorio']
    },
    origin: {
        type: String,
        required: [true, 'El origen es obligatorio'],
        trim: true
    },
    destination: {
        type: String,
        required: [true, 'El destino es obligatorio'],
        trim: true
    },
    departure_time: {
        type: Date,
        required: [true, 'La hora de salida es obligatoria']
    },
    arrival_time: {
        type: Date,
        default: null
    },
    price: {
        type: Number,
        required: [true, 'El precio es obligatorio'],
        min: [0, 'El precio no puede ser negativo']
    },
    available_seats: {
        type: Number,
        default: 4,
        min: [0, 'Los asientos disponibles no pueden ser negativos'],
        max: [8, 'El número máximo de asientos es 8']
    },
    status: {
        type: String,
        enum: {
            values: ['scheduled', 'in_progress', 'completed', 'cancelled'],
            message: '{VALUE} no es un estado válido'
        },
        default: 'scheduled'
    },
    passengers: [{
        name: {
            type: String,
            required: true
        },
        phone: {
            type: String,
            required: true
        },
        seats_reserved: {
            type: Number,
            default: 1,
            min: 1
        }
    }],
    distance_km: {
        type: Number,
        min: [0, 'La distancia no puede ser negativa']
    },
    duration_minutes: {
        type: Number,
        min: [0, 'La duración no puede ser negativa']
    }
}, {
    timestamps: true,  // Agrega createdAt y updatedAt automáticamente
    versionKey: false  // Elimina el campo __v
});

// Índices para mejorar búsquedas
tripSchema.index({ driver_id: 1 });
tripSchema.index({ status: 1 });
tripSchema.index({ departure_time: 1 });

// Método virtual para calcular asientos ocupados
tripSchema.virtual('occupied_seats').get(function() {
    if (!this.passengers || this.passengers.length === 0) {
        return 0;
    }
    return this.passengers.reduce((total, passenger) => total + passenger.seats_reserved, 0);
});

// Método virtual para verificar disponibilidad
tripSchema.virtual('is_available').get(function() {
    return this.available_seats > 0 && this.status === 'scheduled';
});

// Método para agregar un pasajero
tripSchema.methods.addPassenger = async function(passengerData) {
    if (this.available_seats < passengerData.seats_reserved) {
        throw new Error('No hay suficientes asientos disponibles');
    }
    
    this.passengers.push(passengerData);
    this.available_seats -= passengerData.seats_reserved;
    
    return await this.save();
};

// Middleware pre-save para validaciones adicionales
tripSchema.pre('save', function(next) {
    // Validar que la fecha de salida no sea en el pasado (solo para nuevos documentos)
    if (this.isNew && this.departure_time < new Date()) {
        next(new Error('La hora de salida no puede ser en el pasado'));
    }
    
    // Validar que arrival_time sea después de departure_time
    if (this.arrival_time && this.arrival_time < this.departure_time) {
        next(new Error('La hora de llegada debe ser después de la hora de salida'));
    }
    
    next();
});

export default mongoose.model('Trip', tripSchema);

routes/auth-routes.mjs

import express from 'express';
import { login, register, verifyToken } from '../controllers/controller-auth.mjs';
import { authenticateToken } from '../middlewares/auth.mjs';

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     LoginRequest:
 *       type: object
 *       required:
 *         - email
 *         - license_number
 *       properties:
 *         email:
 *           type: string
 *           format: email
 *           example: juan.vargas40@uptc.edu.co
 *         license_number:
 *           type: string
 *           example: CD25442652
 *     RegisterRequest:
 *       type: object
 *       required:
 *         - name
 *         - email
 *         - phone
 *         - license_number
 *       properties:
 *         name:
 *           type: string
 *           example: Juan Pérez
 *         email:
 *           type: string
 *           format: email
 *           example: juan@example.com
 *         phone:
 *           type: string
 *           example: +57 300 1234567
 *         license_number:
 *           type: string
 *           example: ABC123456
 */

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Login de conductor
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Login exitoso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Login exitoso
 *                 token:
 *                   type: string
 *                   example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *                 driver:
 *                   type: object
 *       401:
 *         description: Credenciales inválidas
 */
router.post('/login', login);

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Registrar nuevo conductor
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterRequest'
 *     responses:
 *       201:
 *         description: Conductor registrado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 token:
 *                   type: string
 *                 driver:
 *                   type: object
 *       400:
 *         description: Error de validación o conductor ya existe
 */
router.post('/register', register);

/**
 * @swagger
 * /api/auth/verify:
 *   get:
 *     summary: Verificar token JWT
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Token válido
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 driver:
 *                   type: object
 *       401:
 *         description: Token inválido o faltante
 *       404:
 *         description: Conductor no encontrado
 */
router.get('/verify', authenticateToken, verifyToken);

export default router;

routes/driver-routes.mjs

import express from 'express';
import { findAll, findById, remove, save, update } from '../controllers/controller-driver.mjs';
import { authenticateToken } from '../middlewares/auth.mjs';

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Driver:
 *       type: object
 *       required:
 *         - name
 *         - email
 *         - phone
 *         - license_number
 *       properties:
 *         _id:
 *           type: string
 *           description: ID autogenerado del conductor
 *         name:
 *           type: string
 *           description: Nombre completo del conductor
 *           example: Juan Pérez
 *         email:
 *           type: string
 *           format: email
 *           description: Email del conductor
 *           example: juan@example.com
 *         phone:
 *           type: string
 *           description: Teléfono del conductor
 *           example: +57 300 1234567
 *         license_number:
 *           type: string
 *           description: Número de licencia de conducir
 *           example: ABC123456
 *         rating:
 *           type: number
 *           format: float
 *           minimum: 0
 *           maximum: 5
 *           description: Calificación del conductor
 *           example: 4.5
 *         status:
 *           type: string
 *           enum: [available, busy, offline]
 *           description: Estado actual del conductor
 *           example: available
 *         total_trips:
 *           type: number
 *           description: Número total de viajes realizados
 *           example: 25
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 */

/**
 * @swagger
 * /api/drivers:
 *   get:
 *     summary: Obtener todos los conductores
 *     tags: [Drivers]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista de conductores
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Driver'
 *                 total:
 *                   type: number
 *       401:
 *         description: No autorizado - Token inválido o faltante
 */
router.get('/', authenticateToken, findAll);

/**
 * @swagger
 * /api/drivers/{id}:
 *   get:
 *     summary: Obtener conductor por ID
 *     tags: [Drivers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del conductor
 *     responses:
 *       200:
 *         description: Conductor encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Driver'
 *       404:
 *         description: Conductor no encontrado
 *       401:
 *         description: No autorizado
 */
router.get('/:id', authenticateToken, findById);

/**
 * @swagger
 * /api/drivers:
 *   post:
 *     summary: Crear un nuevo conductor
 *     tags: [Drivers]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - email
 *               - phone
 *               - license_number
 *             properties:
 *               name:
 *                 type: string
 *                 example: Carlos Rodríguez
 *               email:
 *                 type: string
 *                 format: email
 *                 example: carlos@example.com
 *               phone:
 *                 type: string
 *                 example: +57 310 9876543
 *               license_number:
 *                 type: string
 *                 example: XYZ789012
 *     responses:
 *       201:
 *         description: Conductor creado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   $ref: '#/components/schemas/Driver'
 *       400:
 *         description: Error de validación
 *       401:
 *         description: No autorizado
 */
router.post('/', authenticateToken, save);

/**
 * @swagger
 * /api/drivers/{id}:
 *   put:
 *     summary: Actualizar conductor
 *     tags: [Drivers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del conductor
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *               phone:
 *                 type: string
 *               license_number:
 *                 type: string
 *               rating:
 *                 type: number
 *                 minimum: 0
 *                 maximum: 5
 *               status:
 *                 type: string
 *                 enum: [available, busy, offline]
 *             example:
 *               status: busy
 *               rating: 4.8
 *     responses:
 *       200:
 *         description: Conductor actualizado exitosamente
 *       404:
 *         description: Conductor no encontrado
 *       401:
 *         description: No autorizado
 */
router.put('/:id', authenticateToken, update);

/**
 * @swagger
 * /api/drivers/{id}:
 *   delete:
 *     summary: Eliminar conductor
 *     tags: [Drivers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID del conductor
 *     responses:
 *       200:
 *         description: Conductor eliminado exitosamente
 *       404:
 *         description: Conductor no encontrado
 *       401:
 *         description: No autorizado
 */
router.delete('/:id', authenticateToken, remove);

export default router;

routes/trip-routes.mjs

import express from 'express';
import {
    addPassenger,
    findAll,
    findById,
    getStatistics,
    rateTrip,
    remove,
    save,
    update
} from '../controllers/controller-trips.mjs';
import { authenticateToken } from '../middlewares/auth.mjs';

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Trip:
 *       type: object
 *       required:
 *         - driver_id
 *         - origin
 *         - destination
 *         - departure_time
 *         - price
 *       properties:
 *         _id:
 *           type: string
 *         driver_id:
 *           type: string
 *           description: ID del conductor
 *         origin:
 *           type: string
 *           example: Bogotá
 *         destination:
 *           type: string
 *           example: Fusagasugá
 *         departure_time:
 *           type: string
 *           format: date-time
 *           example: 2025-10-15T08:00:00Z
 *         arrival_time:
 *           type: string
 *           format: date-time
 *         price:
 *           type: number
 *           example: 25000
 *         available_seats:
 *           type: number
 *           example: 4
 *         status:
 *           type: string
 *           enum: [scheduled, in_progress, completed, cancelled]
 *           example: scheduled
 *         distance_km:
 *           type: number
 *           example: 65
 *         duration_minutes:
 *           type: number
 *           example: 90
 *         passengers:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               phone:
 *                 type: string
 *               seats_reserved:
 *                 type: number
 */

/**
 * @swagger
 * /api/trips:
 *   get:
 *     summary: Obtener todos los viajes
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [scheduled, in_progress, completed, cancelled]
 *         description: Filtrar por estado
 *       - in: query
 *         name: driver_id
 *         schema:
 *           type: string
 *         description: Filtrar por conductor
 *     responses:
 *       200:
 *         description: Lista de viajes
 *       401:
 *         description: No autorizado
 */
router.get('/', authenticateToken, findAll);

/**
 * @swagger
 * /api/trips/statistics:
 *   get:
 *     summary: Obtener estadísticas de viajes
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: driver_id
 *         schema:
 *           type: string
 *         description: Filtrar estadísticas por conductor
 *     responses:
 *       200:
 *         description: Estadísticas de viajes
 *       401:
 *         description: No autorizado
 */
router.get('/statistics', authenticateToken, getStatistics);

/**
 * @swagger
 * /api/trips/{id}:
 *   get:
 *     summary: Obtener viaje por ID
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Viaje encontrado
 *       404:
 *         description: Viaje no encontrado
 */
router.get('/:id', authenticateToken, findById);

/**
 * @swagger
 * /api/trips:
 *   post:
 *     summary: Crear un nuevo viaje
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - driver_id
 *               - origin
 *               - destination
 *               - departure_time
 *               - price
 *             properties:
 *               driver_id:
 *                 type: string
 *                 example: 507f1f77bcf86cd799439011
 *               origin:
 *                 type: string
 *                 example: Bogotá
 *               destination:
 *                 type: string
 *                 example: Fusagasugá
 *               departure_time:
 *                 type: string
 *                 format: date-time
 *                 example: 2025-10-15T08:00:00Z
 *               price:
 *                 type: number
 *                 example: 25000
 *               available_seats:
 *                 type: number
 *                 example: 4
 *               distance_km:
 *                 type: number
 *                 example: 65
 *               duration_minutes:
 *                 type: number
 *                 example: 90
 *     responses:
 *       201:
 *         description: Viaje creado exitosamente
 *       400:
 *         description: Error de validación
 */
router.post('/', authenticateToken, save);

/**
 * @swagger
 * /api/trips/{id}:
 *   put:
 *     summary: Actualizar viaje
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               status:
 *                 type: string
 *                 enum: [scheduled, in_progress, completed, cancelled]
 *               arrival_time:
 *                 type: string
 *                 format: date-time
 *             example:
 *               status: completed
 *               arrival_time: 2025-10-15T09:30:00Z
 *     responses:
 *       200:
 *         description: Viaje actualizado
 *       404:
 *         description: Viaje no encontrado
 */
router.put('/:id', authenticateToken, update);

/**
 * @swagger
 * /api/trips/{id}:
 *   delete:
 *     summary: Eliminar viaje
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Viaje eliminado
 *       404:
 *         description: Viaje no encontrado
 */
router.delete('/:id', authenticateToken, remove);

/**
 * @swagger
 * /api/trips/{id}/passengers:
 *   post:
 *     summary: Agregar pasajero al viaje
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - phone
 *               - seats_reserved
 *             properties:
 *               name:
 *                 type: string
 *                 example: María González
 *               phone:
 *                 type: string
 *                 example: +57 310 9876543
 *               seats_reserved:
 *                 type: number
 *                 example: 2
 *     responses:
 *       200:
 *         description: Pasajero agregado
 *       400:
 *         description: No hay asientos disponibles
 */
router.post('/:id/passengers', authenticateToken, addPassenger);

/**
 * @swagger
 * /api/trips/{id}/rate:
 *   post:
 *     summary: Calificar viaje
 *     tags: [Trips]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - rating
 *             properties:
 *               rating:
 *                 type: number
 *                 minimum: 0
 *                 maximum: 5
 *                 example: 4.5
 *     responses:
 *       200:
 *         description: Viaje calificado exitosamente
 *       400:
 *         description: Solo se pueden calificar viajes completados
 */
router.post('/:id/rate', authenticateToken, rateTrip);

export default router;

server.mjs

import cors from 'cors';
import express from 'express';
import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import connectDB from './config/connect-db.mjs';
import { errorHandler, notFound } from './middlewares/errorHandler.mjs';
import authRoutes from './routes/auth-routes.mjs';
import driverRoutes from './routes/driver-routes.mjs';
import tripRoutes from './routes/trip-routes.mjs';

const app = express();
const PORT = process.env.PORT || 3000;

// Conectar a MongoDB
connectDB();

// Middlewares
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
// En server.mjs - Swagger configuration
const swaggerOptions = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'Driver Trip API',
            version: '1.0.0',
            description: 'API RESTful para gestión de conductores y viajes',
        },
        servers: [
            // Servidor de producción
            {
                url: 'https://proyectoelectiva-pyl0.onrender.com',
                description: 'Production server (Render)'
            },
            // Servidor local (desarrollo)
            {
                url: 'http://localhost:3000',
                description: 'Development server'
            }
        ],
        components: {
            securitySchemes: {
                bearerAuth: {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT'
                }
            }
        },
        security: [{
            bearerAuth: []
        }]
    },
    apis: ['./routes/*.mjs']
};
const swaggerDocs = swaggerJsdoc(swaggerOptions);

// Personalizar Swagger UI
const swaggerUiOptions = {
    customCss: '.swagger-ui .topbar { display: none }',
    customSiteTitle: 'Driver Trip API Documentation',
    swaggerOptions: {
        persistAuthorization: true,  // Mantener el token entre recargas
    }
};

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs, swaggerUiOptions));

// Routes
app.get('/', (req, res) => {
    res.json({
        success: true,
        message: 'Bienvenido a Driver Trip API',
        version: '1.0.0',
        documentation: '/api-docs',
        endpoints: {
            authentication: {
                login: 'POST /api/auth/login',
                register: 'POST /api/auth/register',
                verify: 'GET /api/auth/verify'
            },
            drivers: {
                list: 'GET /api/drivers',
                get: 'GET /api/drivers/:id',
                create: 'POST /api/drivers',
                update: 'PUT /api/drivers/:id',
                delete: 'DELETE /api/drivers/:id'
            },
            trips: {
                list: 'GET /api/trips',
                get: 'GET /api/trips/:id',
                create: 'POST /api/trips',
                update: 'PUT /api/trips/:id',
                delete: 'DELETE /api/trips/:id',
                addPassenger: 'POST /api/trips/:id/passengers',
                rate: 'POST /api/trips/:id/rate',
                statistics: 'GET /api/trips/statistics'
            }
        }
    });
});

app.use('/api/auth', authRoutes);
app.use('/api/drivers', driverRoutes);
app.use('/api/trips', tripRoutes);

// Error handlers
app.use(notFound);
app.use(errorHandler);

app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`📚 API Documentation: http://localhost:${PORT}/api-docs`);
    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
});

export default app;



y este es mi frontend

src/api/authApi.js

import axios from '../utils/axios';

export const authApi = {
  register: async (data) => {
    const response = await axios.post('/auth/register', data);
    return response.data;
  },

  login: async (email, license_number) => {
    const response = await axios.post('/auth/login', { 
      email, 
      license_number 
    });
    return response.data;
  },

  verifyToken: async () => {
    const response = await axios.get('/auth/verify');
    return response.data;
  }
};

src/api/driverApi.js
import axios from '../utils/axios';

export const driverApi = {
  getAll: async () => {
    const response = await axios.get('/drivers');
    return response.data;
  },

  getById: async (id) => {
    const response = await axios.get(`/drivers/${id}`);
    return response.data;
  },

  create: async (data) => {
    const response = await axios.post('/drivers', data);
    return response.data;
  },

  update: async (id, data) => {
    const response = await axios.put(`/drivers/${id}`, data);
    return response.data;
  },

  delete: async (id) => {
    const response = await axios.delete(`/drivers/${id}`);
    return response.data;
  }
};

src/api/tripApi.js

import axios from '../utils/axios';

export const tripApi = {
  getAll: async (filters = {}) => {
    const params = new URLSearchParams(filters);
    const response = await axios.get(`/trips?${params}`);
    return response.data;
  },

  getById: async (id) => {
    const response = await axios.get(`/trips/${id}`);
    return response.data;
  },

  create: async (data) => {
    const response = await axios.post('/trips', data);
    return response.data;
  },

  update: async (id, data) => {
    const response = await axios.put(`/trips/${id}`, data);
    return response.data;
  },

  delete: async (id) => {
    const response = await axios.delete(`/trips/${id}`);
    return response.data;
  },

  addPassenger: async (id, passenger) => {
    const response = await axios.post(`/trips/${id}/passengers`, passenger);
    return response.data;
  },

  rateTrip: async (id, rating) => {
    const response = await axios.post(`/trips/${id}/rate`, { rating });
    return response.data;
  },

  getStatistics: async (driverId = null) => {
    const url = driverId 
      ? `/trips/statistics?driver_id=${driverId}`
      : '/trips/statistics';
    const response = await axios.get(url);
    return response.data;
  }
};  

src/components/LoadingSpinner.jsx

const LoadingSpinner = ({ size = 'md', text = 'Cargando...' }) => {
    const sizes = {
      sm: 'h-6 w-6',
      md: 'h-12 w-12',
      lg: 'h-16 w-16'
    };
  
    return (
      <div className="flex flex-col items-center justify-center p-8">
        <div className={`animate-spin rounded-full border-b-2 border-blue-600 ${sizes[size]}`}></div>
        {text && <p className="mt-4 text-gray-600">{text}</p>}
      </div>
    );
  };
  
  export default LoadingSpinner;

src/components/Navbar.jsx

import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const Navbar = () => {
  const { isAuthenticated, driver, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  return (
    <nav className="bg-white shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link to="/" className="flex items-center space-x-2">
            <span className="text-2xl">🚗</span>
            <span className="text-xl font-bold text-blue-600">Driver Trip</span>
          </Link>

          <div className="flex items-center space-x-6">
            {isAuthenticated ? (
              <>
                <Link to="/dashboard" className="text-gray-700 hover:text-blue-600 transition">
                  Dashboard
                </Link>
                <Link to="/trips" className="text-gray-700 hover:text-blue-600 transition">
                  Viajes
                </Link>
                <Link to="/create-trip" className="text-gray-700 hover:text-blue-600 transition">
                  Crear Viaje
                </Link>
                <Link to="/statistics" className="text-gray-700 hover:text-blue-600 transition">
                  Estadísticas
                </Link>
                
                <div className="flex items-center space-x-3">
                  <div className="text-right">
                    <p className="text-sm font-semibold">{driver?.name}</p>
                    <p className="text-xs text-gray-500">⭐ {driver?.rating || 5.0}</p>
                  </div>
                  <button
                    onClick={handleLogout}
                    className="btn btn-danger text-sm"
                  >
                    Salir
                  </button>
                </div>
              </>
            ) : (
              <>
                <Link to="/login" className="text-gray-700 hover:text-blue-600 transition">
                  Iniciar Sesión
                </Link>
                <Link to="/register" className="btn btn-primary">
                  Registrarse
                </Link>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

src/components/ProtectedRoute.jsx

import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Cargando...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default ProtectedRoute;

src/context/AuthContext.jsx

import { createContext, useContext, useEffect, useState } from 'react';
import { authApi } from '../api/authApi';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [driver, setDriver] = useState(null);
  const [token, setToken] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    const storedDriver = localStorage.getItem('driver');

    if (storedToken && storedDriver) {
      setToken(storedToken);
      setDriver(JSON.parse(storedDriver));
    }
    setLoading(false);
  }, []);

  const login = async (email, license_number) => {
    try {
      const response = await authApi.login(email, license_number);
      const { token, driver } = response;
      
      localStorage.setItem('token', token);
      localStorage.setItem('driver', JSON.stringify(driver));
      
      setToken(token);
      setDriver(driver);
      
      return { success: true };
    } catch (error) {
      console.error('Login error:', error);
      return { 
        success: false, 
        error: error.response?.data?.message || 'Error al iniciar sesión' 
      };
    }
  };

  const register = async (data) => {
    try {
      const response = await authApi.register(data);
      const { token, driver } = response;
      
      localStorage.setItem('token', token);
      localStorage.setItem('driver', JSON.stringify(driver));
      
      setToken(token);
      setDriver(driver);
      
      return { success: true };
    } catch (error) {
      console.error('Register error:', error);
      return { 
        success: false, 
        error: error.response?.data?.message || 'Error al registrarse' 
      };
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('driver');
    setToken(null);
    setDriver(null);
  };

  const value = {
    driver,
    token,
    loading,
    isAuthenticated: !!token,
    login,
    register,
    logout
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

src/pages/CreateTrip.jsx

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { tripApi } from '../api/tripApi';
import { useAuth } from '../context/AuthContext';

const CreateTrip = () => {
  const { driver } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const [formData, setFormData] = useState({
    origin: '',
    destination: '',
    departure_time: '',
    price: '',
    available_seats: 4,
    distance_km: '',
    duration_minutes: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const tripData = {
        driver_id: driver.id,
        origin: formData.origin,
        destination: formData.destination,
        departure_time: formData.departure_time,
        price: parseFloat(formData.price),
        available_seats: parseInt(formData.available_seats),
      };

      // Agregar campos opcionales si tienen valor
      if (formData.distance_km) {
        tripData.distance_km = parseFloat(formData.distance_km);
      }
      if (formData.duration_minutes) {
        tripData.duration_minutes = parseInt(formData.duration_minutes);
      }

      await tripApi.create(tripData);
      alert('¡Viaje creado exitosamente!');
      navigate('/trips');
    } catch (error) {
      console.error('Error creating trip:', error);
      setError(error.response?.data?.message || 'Error al crear el viaje');
    } finally {
      setLoading(false);
    }
  };

  // Obtener fecha/hora mínima (ahora)
  const getMinDateTime = () => {
    const now = new Date();
    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
    return now.toISOString().slice(0, 16);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-2xl">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Crear Nuevo Viaje
          </h1>
          <p className="text-gray-600">
            Completa la información de tu viaje
          </p>
        </div>

        {/* Form */}
        <div className="card">
          <form onSubmit={handleSubmit} className="space-y-6">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                {error}
              </div>
            )}

            {/* Origin & Destination */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="label">Origen *</label>
                <input
                  type="text"
                  className="input"
                  placeholder="Bogotá"
                  value={formData.origin}
                  onChange={(e) => setFormData({...formData, origin: e.target.value})}
                  required
                />
              </div>

              <div>
                <label className="label">Destino *</label>
                <input
                  type="text"
                  className="input"
                  placeholder="Fusagasugá"
                  value={formData.destination}
                  onChange={(e) => setFormData({...formData, destination: e.target.value})}
                  required
                />
              </div>
            </div>

            {/* Departure Time */}
            <div>
              <label className="label">Fecha y Hora de Salida *</label>
              <input
                type="datetime-local"
                className="input"
                value={formData.departure_time}
                onChange={(e) => setFormData({...formData, departure_time: e.target.value})}
                min={getMinDateTime()}
                required
              />
              <p className="text-sm text-gray-500 mt-1">
                La fecha debe ser futura
              </p>
            </div>

            {/* Price & Seats */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="label">Precio por Persona *</label>
                <div className="relative">
                  <span className="absolute left-3 top-2.5 text-gray-500">$</span>
                  <input
                    type="number"
                    className="input pl-8"
                    placeholder="25000"
                    value={formData.price}
                    onChange={(e) => setFormData({...formData, price: e.target.value})}
                    min="1"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="label">Asientos Disponibles *</label>
                <input
                  type="number"
                  className="input"
                  value={formData.available_seats}
                  onChange={(e) => setFormData({...formData, available_seats: e.target.value})}
                  min="1"
                  max="8"
                  required
                />
              </div>
            </div>

            {/* Optional Fields */}
            <div className="border-t pt-6">
              <h3 className="font-semibold text-gray-700 mb-4">
                Información Adicional (Opcional)
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="label">Distancia (km)</label>
                  <input
                    type="number"
                    className="input"
                    placeholder="65"
                    value={formData.distance_km}
                    onChange={(e) => setFormData({...formData, distance_km: e.target.value})}
                    min="0"
                  />
                </div>

                <div>
                  <label className="label">Duración (minutos)</label>
                  <input
                    type="number"
                    className="input"
                    placeholder="90"
                    value={formData.duration_minutes}
                    onChange={(e) => setFormData({...formData, duration_minutes: e.target.value})}
                    min="0"
                  />
                </div>
              </div>
            </div>

            {/* Summary */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-2">📋 Resumen</h4>
              <div className="space-y-1 text-sm text-blue-800">
                <p>• Ruta: {formData.origin || '...'} → {formData.destination || '...'}</p>
                <p>• Precio: ${formData.price ? parseFloat(formData.price).toLocaleString() : '...'} por persona</p>
                <p>• Asientos: {formData.available_seats}</p>
                <p>• Ingreso potencial: ${formData.price && formData.available_seats ? 
                  (parseFloat(formData.price) * parseInt(formData.available_seats)).toLocaleString() : '...'}</p>
              </div>
            </div>

            {/* Actions */}
            <div className="flex gap-4">
              <button
                type="submit"
                className="btn btn-primary flex-1"
                disabled={loading}
              >
                {loading ? 'Creando...' : '✓ Crear Viaje'}
              </button>
              <button
                type="button"
                onClick={() => navigate('/trips')}
                className="btn btn-secondary"
              >
                Cancelar
              </button>
            </div>
          </form>
        </div>

        {/* Info Card */}
        <div className="card mt-6 bg-yellow-50 border border-yellow-200">
          <h4 className="font-semibold text-yellow-900 mb-2">💡 Consejos</h4>
          <ul className="text-sm text-yellow-800 space-y-1">
            <li>• Programa tu viaje con anticipación para conseguir más pasajeros</li>
            <li>• Define un precio justo considerando gasolina, peajes y desgaste</li>
            <li>• Asegúrate de tener tu vehículo en buen estado</li>
            <li>• Sé puntual en la hora de salida</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default CreateTrip;

src/pages/Dashboard.jsx

import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { tripApi } from '../api/tripApi';
import { useAuth } from '../context/AuthContext';

const Dashboard = () => {
  const { driver } = useAuth();
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadStatistics();
  }, [driver]);

  const loadStatistics = async () => {
    try {
      const response = await tripApi.getStatistics(driver.id);
      setStats(response.data);
    } catch (error) {
      console.error('Error loading stats:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Cargando estadísticas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            ¡Bienvenido, {driver?.name}! 👋
          </h1>
          <p className="text-gray-600">
            Este es tu panel de control
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="card bg-gradient-to-br from-blue-500 to-blue-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100 text-sm mb-1">Rating</p>
                <p className="text-3xl font-bold">⭐ {driver?.rating || 5.0}</p>
              </div>
              <div className="text-5xl opacity-20">🌟</div>
            </div>
          </div>

          <div className="card bg-gradient-to-br from-green-500 to-green-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100 text-sm mb-1">Total Viajes</p>
                <p className="text-3xl font-bold">{stats?.total_trips || 0}</p>
              </div>
              <div className="text-5xl opacity-20">🚗</div>
            </div>
          </div>

          <div className="card bg-gradient-to-br from-purple-500 to-purple-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100 text-sm mb-1">Completados</p>
                <p className="text-3xl font-bold">{stats?.completed || 0}</p>
              </div>
              <div className="text-5xl opacity-20">✅</div>
            </div>
          </div>

          <div className="card bg-gradient-to-br from-yellow-500 to-yellow-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-yellow-100 text-sm mb-1">Ingresos</p>
                <p className="text-2xl font-bold">${(stats?.total_revenue || 0).toLocaleString()}</p>
              </div>
              <div className="text-5xl opacity-20">💰</div>
            </div>
          </div>
        </div>

        {/* Additional Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="card">
            <h3 className="font-semibold text-gray-700 mb-3">Viajes por Estado</h3>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Programados</span>
                <span className="badge badge-blue">{stats?.scheduled || 0}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">En Progreso</span>
                <span className="badge badge-yellow">{stats?.in_progress || 0}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Cancelados</span>
                <span className="badge badge-red">{stats?.cancelled || 0}</span>
              </div>
            </div>
          </div>

          <div className="card">
            <h3 className="font-semibold text-gray-700 mb-3">Tasa de Completitud</h3>
            <div className="text-center py-4">
              <div className="text-4xl font-bold text-green-600 mb-2">
                {stats?.completion_rate || '0%'}
              </div>
              <p className="text-sm text-gray-500">
                De tus viajes totales
              </p>
            </div>
          </div>

          <div className="card">
            <h3 className="font-semibold text-gray-700 mb-3">Tu Estado</h3>
            <div className="text-center py-4">
              <div className={`inline-block px-4 py-2 rounded-full text-sm font-semibold ${
                driver?.status === 'available' ? 'bg-green-100 text-green-800' :
                driver?.status === 'busy' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {driver?.status === 'available' ? '🟢 Disponible' :
                 driver?.status === 'busy' ? '🟡 Ocupado' :
                 '⚫ Offline'}
              </div>
              <p className="text-sm text-gray-500 mt-2">
                {driver?.total_trips || 0} viajes realizados
              </p>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="card">
          <h3 className="font-semibold text-gray-700 mb-4">Acciones Rápidas</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Link to="/create-trip" className="btn btn-primary text-center">
              🚗 Crear Nuevo Viaje
            </Link>
            <Link to="/trips" className="btn btn-secondary text-center">
              📋 Ver Mis Viajes
            </Link>
            <Link to="/statistics" className="btn btn-secondary text-center">
              📊 Ver Estadísticas
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

src/pages/Home.jsx
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const Home = () => {
  const { isAuthenticated } = useAuth();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <div className="container mx-auto px-4 py-20">
        <div className="text-center max-w-4xl mx-auto">
          <h1 className="text-6xl font-bold text-gray-900 mb-6">
            🚗 Driver Trip
          </h1>
          <p className="text-2xl text-gray-600 mb-8">
            Comparte viajes, ahorra costos, conoce gente nueva
          </p>
          <p className="text-lg text-gray-500 mb-12">
            Conectamos conductores con pasajeros para hacer tus viajes más económicos y amigables
          </p>

          <div className="flex justify-center gap-4 mb-16">
            {isAuthenticated ? (
              <>
                <Link to="/trips" className="btn btn-primary text-lg px-8 py-3">
                  Ver Viajes Disponibles
                </Link>
                <Link to="/create-trip" className="btn btn-success text-lg px-8 py-3">
                  Ofrecer un Viaje
                </Link>
              </>
            ) : (
              <>
                <Link to="/register" className="btn btn-primary text-lg px-8 py-3">
                  Comenzar Ahora
                </Link>
                <Link to="/login" className="btn btn-secondary text-lg px-8 py-3">
                  Iniciar Sesión
                </Link>
              </>
            )}
          </div>

          <div className="grid md:grid-cols-3 gap-8 mt-20">
            <div className="card text-center">
              <div className="text-5xl mb-4">💰</div>
              <h3 className="text-xl font-bold mb-2">Ahorra Dinero</h3>
              <p className="text-gray-600">
                Comparte los gastos del viaje entre varios pasajeros
              </p>
            </div>

            <div className="card text-center">
              <div className="text-5xl mb-4">🌟</div>
              <h3 className="text-xl font-bold mb-2">Sistema de Rating</h3>
              <p className="text-gray-600">
                Califica y elige conductores con buena reputación
              </p>
            </div>

            <div className="card text-center">
              <div className="text-5xl mb-4">🚀</div>
              <h3 className="text-xl font-bold mb-2">Fácil y Rápido</h3>
              <p className="text-gray-600">
                Reserva tu asiento en segundos desde cualquier dispositivo
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;

src/pages/Login.jsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const Login = () => {
  const [formData, setFormData] = useState({
    email: '',
    license_number: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await login(formData.email, formData.license_number);

    if (result.success) {
      navigate('/dashboard');
    } else {
      setError(result.error);
    }

    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50 py-12 px-4">
      <div className="max-w-md w-full">
        <div className="text-center mb-8">
          <h2 className="text-4xl font-bold text-gray-900 mb-2">
            Iniciar Sesión
          </h2>
          <p className="text-gray-600">
            Ingresa a tu cuenta de conductor
          </p>
        </div>

        <div className="card">
          <form onSubmit={handleSubmit} className="space-y-4">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                {error}
              </div>
            )}

            <div>
              <label className="label">Email</label>
              <input
                type="email"
                className="input"
                placeholder="tu@email.com"
                value={formData.email}
                onChange={(e) => setFormData({...formData, email: e.target.value})}
                required
              />
            </div>

            <div>
              <label className="label">Número de Licencia</label>
              <input
                type="text"
                className="input"
                placeholder="ABC123456"
                value={formData.license_number}
                onChange={(e) => setFormData({...formData, license_number: e.target.value.toUpperCase()})}
                required
              />
            </div>

            <button
              type="submit"
              className="w-full btn btn-primary"
              disabled={loading}
            >
              {loading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
            </button>
          </form>

          <div className="mt-6 text-center">
            <p className="text-gray-600">
              ¿No tienes cuenta?{' '}
              <Link to="/register" className="text-blue-600 font-semibold hover:underline">
                Regístrate aquí
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;

src/pages/Register.jsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const Register = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    license_number: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await register(formData);

    if (result.success) {
      navigate('/dashboard');
    } else {
      setError(result.error);
    }

    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50 py-12 px-4">
      <div className="max-w-md w-full">
        <div className="text-center mb-8">
          <h2 className="text-4xl font-bold text-gray-900 mb-2">
            Crear Cuenta
          </h2>
          <p className="text-gray-600">
            Regístrate como conductor
          </p>
        </div>

        <div className="card">
          <form onSubmit={handleSubmit} className="space-y-4">
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                {error}
              </div>
            )}

            <div>
              <label className="label">Nombre Completo</label>
              <input
                type="text"
                className="input"
                placeholder="Juan Pérez"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                required
                minLength={3}
              />
            </div>

            <div>
              <label className="label">Email</label>
              <input
                type="email"
                className="input"
                placeholder="tu@email.com"
                value={formData.email}
                onChange={(e) => setFormData({...formData, email: e.target.value})}
                required
              />
            </div>

            <div>
              <label className="label">Teléfono</label>
              <input
                type="tel"
                className="input"
                placeholder="+57 300 1234567"
                value={formData.phone}
                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                required
              />
            </div>

            <div>
              <label className="label">Número de Licencia</label>
              <input
                type="text"
                className="input"
                placeholder="ABC123456"
                value={formData.license_number}
                onChange={(e) => setFormData({...formData, license_number: e.target.value.toUpperCase()})}
                required
              />
            </div>

            <button
              type="submit"
              className="w-full btn btn-primary"
              disabled={loading}
            >
              {loading ? 'Registrando...' : 'Registrarse'}
            </button>
          </form>

          <div className="mt-6 text-center">
            <p className="text-gray-600">
              ¿Ya tienes cuenta?{' '}
              <Link to="/login" className="text-blue-600 font-semibold hover:underline">
                Inicia sesión aquí
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Register;

src/pages/Statistics.jsx

import { useEffect, useState } from 'react';
import { tripApi } from '../api/tripApi';
import { useAuth } from '../context/AuthContext';

const Statistics = () => {
  const { driver } = useAuth();
  const [stats, setStats] = useState(null);
  const [globalStats, setGlobalStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadStatistics();
  }, []);

  const loadStatistics = async () => {
    setLoading(true);
    try {
      // Estadísticas del conductor
      const driverStatsResponse = await tripApi.getStatistics(driver.id);
      setStats(driverStatsResponse.data);

      // Estadísticas globales
      const globalStatsResponse = await tripApi.getStatistics();
      setGlobalStats(globalStatsResponse.data);
    } catch (error) {
      console.error('Error loading statistics:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Cargando estadísticas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            📊 Estadísticas Detalladas
          </h1>
          <p className="text-gray-600">
            Análisis completo de tu desempeño
          </p>
        </div>

        {/* Personal Stats */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            Tus Estadísticas
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div className="card bg-gradient-to-br from-blue-500 to-blue-600 text-white">
              <h3 className="text-blue-100 text-sm mb-2">Total de Viajes</h3>
              <p className="text-4xl font-bold">{stats?.total_trips || 0}</p>
              <p className="text-blue-100 text-sm mt-2">viajes registrados</p>
            </div>

            <div className="card bg-gradient-to-br from-green-500 to-green-600 text-white">
              <h3 className="text-green-100 text-sm mb-2">Completados</h3>
              <p className="text-4xl font-bold">{stats?.completed || 0}</p>
              <p className="text-green-100 text-sm mt-2">viajes finalizados</p>
            </div>

            <div className="card bg-gradient-to-br from-purple-500 to-purple-600 text-white">
              <h3 className="text-purple-100 text-sm mb-2">Tasa de Éxito</h3>
              <p className="text-4xl font-bold">{stats?.completion_rate || '0%'}</p>
              <p className="text-purple-100 text-sm mt-2">de completitud</p>
            </div>

            <div className="card bg-gradient-to-br from-yellow-500 to-yellow-600 text-white">
              <h3 className="text-yellow-100 text-sm mb-2">Ingresos Totales</h3>
              <p className="text-3xl font-bold">${(stats?.total_revenue || 0).toLocaleString()}</p>
              <p className="text-yellow-100 text-sm mt-2">generados</p>
            </div>
          </div>

          {/* Detailed Breakdown */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="card">
              <h3 className="font-semibold text-gray-700 mb-4">Desglose por Estado</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">📅</span>
                    <span className="font-medium text-gray-700">Programados</span>
                  </div>
                  <span className="badge badge-blue">{stats?.scheduled || 0}</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">🚗</span>
                    <span className="font-medium text-gray-700">En Progreso</span>
                  </div>
                  <span className="badge badge-yellow">{stats?.in_progress || 0}</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">✅</span>
                    <span className="font-medium text-gray-700">Completados</span>
                  </div>
                  <span className="badge badge-green">{stats?.completed || 0}</span>
                </div>

                <div className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">❌</span>
                    <span className="font-medium text-gray-700">Cancelados</span>
                  </div>
                  <span className="badge badge-red">{stats?.cancelled || 0}</span>
                </div>
              </div>
            </div>

            <div className="card">
              <h3 className="font-semibold text-gray-700 mb-4">Rendimiento</h3>
              <div className="space-y-4">
                {/* Progress Bar - Completion Rate */}
                <div>
                  <div className="flex justify-between mb-2">
                    <span className="text-sm font-medium text-gray-700">Tasa de Completitud</span>
                    <span className="text-sm font-bold text-green-600">{stats?.completion_rate || '0%'}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div 
                      className="bg-green-600 h-3 rounded-full transition-all duration-500"
                      style={{ width: stats?.completion_rate || '0%' }}
                    ></div>
                  </div>
                </div>

                {/* Average Revenue per Trip */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">Ingreso Promedio por Viaje</p>
                  <p className="text-2xl font-bold text-blue-600">
                    ${stats?.completed > 0 
                      ? Math.round(stats.total_revenue / stats.completed).toLocaleString() 
                      : 0}
                  </p>
                </div>

                {/* Driver Info */}
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">Tu Rating Actual</p>
                  <div className="flex items-center">
                    <span className="text-3xl text-yellow-500 mr-2">⭐</span>
                    <span className="text-2xl font-bold text-yellow-600">{driver?.rating || 5.0}</span>
                    <span className="text-gray-500 ml-2">/ 5.0</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Global Stats */}
        <div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            Estadísticas Globales del Sistema
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="card bg-gradient-to-br from-indigo-500 to-indigo-600 text-white">
              <h3 className="text-indigo-100 text-sm mb-2">Total Sistema</h3>
              <p className="text-4xl font-bold">{globalStats?.total_trips || 0}</p>
              <p className="text-indigo-100 text-sm mt-2">viajes en total</p>
            </div>

            <div className="card bg-gradient-to-br from-teal-500 to-teal-600 text-white">
              <h3 className="text-teal-100 text-sm mb-2">Tasa Global</h3>
              <p className="text-4xl font-bold">{globalStats?.completion_rate || '0%'}</p>
              <p className="text-teal-100 text-sm mt-2">de completitud</p>
            </div>

            <div className="card bg-gradient-to-br from-pink-500 to-pink-600 text-white">
              <h3 className="text-pink-100 text-sm mb-2">Ingresos Sistema</h3>
              <p className="text-3xl font-bold">${(globalStats?.total_revenue || 0).toLocaleString()}</p>
              <p className="text-pink-100 text-sm mt-2">generados en total</p>
            </div>
          </div>
        </div>

        {/* Comparison */}
        {stats && globalStats && (
          <div className="mt-8 card bg-gradient-to-br from-gray-50 to-gray-100">
            <h3 className="font-semibold text-gray-700 mb-4">📈 Tu Posición</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-600 mb-1">Contribución al Sistema</p>
                <p className="text-2xl font-bold text-blue-600">
                  {globalStats.total_trips > 0 
                    ? ((stats.total_trips / globalStats.total_trips) * 100).toFixed(1) 
                    : 0}%
                </p>
                <p className="text-sm text-gray-500">de todos los viajes</p>
              </div>

              <div>
                <p className="text-sm text-gray-600 mb-1">Comparación de Rating</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {driver?.rating >= 4.5 ? '🏆 Excelente' : 
                   driver?.rating >= 4.0 ? '👍 Muy Bueno' : 
                   driver?.rating >= 3.5 ? '👌 Bueno' : '📈 En Mejora'}
                </p>
                <p className="text-sm text-gray-500">desempeño general</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Statistics;

src/pages/TripDetail.jsx

import { useEffect, useState } from 'react';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { tripApi } from '../api/tripApi';
import { useAuth } from '../context/AuthContext';
import { STATUS_COLORS, STATUS_LABELS } from '../utils/constants';

const TripDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { driver } = useAuth();
  
  const [trip, setTrip] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showPassengerForm, setShowPassengerForm] = useState(false);
  const [showRatingForm, setShowRatingForm] = useState(false);
  const [updating, setUpdating] = useState(false);
  
  const [passengerData, setPassengerData] = useState({
    name: '',
    phone: '',
    seats_reserved: 1
  });

  const [rating, setRating] = useState(5);

  useEffect(() => {
    loadTrip();
  }, [id]);

  const loadTrip = async () => {
    setLoading(true);
    try {
      const response = await tripApi.getById(id);
      setTrip(response.data);
    } catch (error) {
      console.error('Error loading trip:', error);
      alert('Error al cargar el viaje');
      navigate('/trips');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString('es-CO', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleAddPassenger = async (e) => {
    e.preventDefault();
    setUpdating(true);

    try {
      await tripApi.addPassenger(id, passengerData);
      alert('¡Pasajero agregado exitosamente!');
      setShowPassengerForm(false);
      setPassengerData({ name: '', phone: '', seats_reserved: 1 });
      loadTrip();
    } catch (error) {
      alert(error.response?.data?.message || 'Error al agregar pasajero');
    } finally {
      setUpdating(false);
    }
  };

  const handleUpdateStatus = async (newStatus) => {
    if (!window.confirm(`¿Cambiar estado a "${STATUS_LABELS[newStatus]}"?`)) return;

    setUpdating(true);
    try {
      await tripApi.update(id, { 
        status: newStatus,
        ...(newStatus === 'completed' && { arrival_time: new Date().toISOString() })
      });
      alert('Estado actualizado');
      loadTrip();
    } catch (error) {
      alert('Error al actualizar estado');
    } finally {
      setUpdating(false);
    }
  };

  const handleRateTrip = async (e) => {
    e.preventDefault();
    setUpdating(true);

    try {
      await tripApi.rateTrip(id, rating);
      alert('¡Viaje calificado exitosamente!');
      setShowRatingForm(false);
      loadTrip();
    } catch (error) {
      alert(error.response?.data?.message || 'Error al calificar');
    } finally {
      setUpdating(false);
    }
  };

  const handleDelete = async () => {
    if (!window.confirm('¿Estás seguro de cancelar este viaje?')) return;

    try {
      await tripApi.delete(id);
      alert('Viaje cancelado');
      navigate('/trips');
    } catch (error) {
      alert('Error al cancelar viaje');
    }
  };

  const isOwner = trip && driver && trip.driver_id?._id === driver.id;

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Cargando detalles del viaje...</p>
        </div>
      </div>
    );
  }

  if (!trip) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-700 mb-4">Viaje no encontrado</h2>
          <Link to="/trips" className="btn btn-primary">
            Volver a Viajes
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        {/* Back Button */}
        <Link to="/trips" className="inline-flex items-center text-blue-600 hover:text-blue-700 mb-6">
          ← Volver a Viajes
        </Link>

        {/* Main Card */}
        <div className="card mb-6">
          {/* Header */}
          <div className="flex justify-between items-start mb-6 pb-6 border-b">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {trip.origin} → {trip.destination}
              </h1>
              <p className="text-gray-600">
                ID del Viaje: {trip._id}
              </p>
            </div>
            <span className={`badge ${STATUS_COLORS[trip.status]} text-lg px-4 py-2`}>
              {STATUS_LABELS[trip.status]}
            </span>
          </div>

          {/* Driver Info */}
          <div className="mb-6 pb-6 border-b">
            <h3 className="font-semibold text-gray-700 mb-3">👤 Conductor</h3>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex justify-between items-start">
                <div>
                  <p className="font-semibold text-lg">{trip.driver_id?.name || 'N/A'}</p>
                  <p className="text-gray-600">{trip.driver_id?.email || 'N/A'}</p>
                  <p className="text-gray-600">{trip.driver_id?.phone || 'N/A'}</p>
                  <p className="text-sm text-gray-500 mt-1">
                    Licencia: {trip.driver_id?.license_number || 'N/A'}
                  </p>
                </div>
                <div className="text-right">
                  <div className="flex items-center">
                    <span className="text-2xl text-yellow-500 mr-1">⭐</span>
                    <span className="text-2xl font-bold">{trip.driver_id?.rating || 5.0}</span>
                  </div>
                  <p className="text-sm text-gray-500">
                    {trip.driver_id?.total_trips || 0} viajes
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Trip Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <h3 className="font-semibold text-gray-700 mb-3">📋 Detalles del Viaje</h3>
              <div className="space-y-3">
                <div className="flex items-start">
                  <span className="mr-3">📅</span>
                  <div>
                    <p className="font-medium text-gray-700">Salida</p>
                    <p className="text-gray-600">{formatDate(trip.departure_time)}</p>
                  </div>
                </div>

                {trip.arrival_time && (
                  <div className="flex items-start">
                    <span className="mr-3">🏁</span>
                    <div>
                      <p className="font-medium text-gray-700">Llegada</p>
                      <p className="text-gray-600">{formatDate(trip.arrival_time)}</p>
                    </div>
                  </div>
                )}

                <div className="flex items-start">
                  <span className="mr-3">💰</span>
                  <div>
                    <p className="font-medium text-gray-700">Precio</p>
                    <p className="text-2xl font-bold text-green-600">
                      ${trip.price.toLocaleString('es-CO')}
                    </p>
                    <p className="text-sm text-gray-500">por persona</p>
                  </div>
                </div>

                <div className="flex items-start">
                  <span className="mr-3">👥</span>
                  <div>
                    <p className="font-medium text-gray-700">Asientos</p>
                    <p className="text-gray-600">
                      {trip.available_seats} disponibles de {trip.available_seats + (trip.passengers?.length || 0) * (trip.passengers?.[0]?.seats_reserved || 0)}
                    </p>
                  </div>
                </div>

                {trip.distance_km && (
                  <div className="flex items-start">
                    <span className="mr-3">📍</span>
                    <div>
                      <p className="font-medium text-gray-700">Distancia</p>
                      <p className="text-gray-600">{trip.distance_km} km</p>
                    </div>
                  </div>
                )}

                {trip.duration_minutes && (
                  <div className="flex items-start">
                    <span className="mr-3">⏱️</span>
                    <div>
                      <p className="font-medium text-gray-700">Duración Estimada</p>
                      <p className="text-gray-600">{trip.duration_minutes} minutos</p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Passengers */}
            <div>
              <h3 className="font-semibold text-gray-700 mb-3">
                👥 Pasajeros ({trip.passengers?.length || 0})
              </h3>
              {trip.passengers && trip.passengers.length > 0 ? (
                <div className="space-y-2">
                  {trip.passengers.map((passenger, index) => (
                    <div key={index} className="bg-gray-50 p-3 rounded-lg">
                      <p className="font-medium text-gray-800">{passenger.name}</p>
                      <p className="text-sm text-gray-600">{passenger.phone}</p>
                      <p className="text-sm text-gray-500">
                        {passenger.seats_reserved} asiento{passenger.seats_reserved > 1 ? 's' : ''}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="bg-gray-50 p-6 rounded-lg text-center">
                  <p className="text-gray-500">Aún no hay pasajeros registrados</p>
                </div>
              )}
            </div>
          </div>

          {/* Actions */}
          {isOwner && (
            <div className="border-t pt-6">
                            <h3 className="font-semibold text-gray-700 mb-3">⚙️ Acciones del Conductor</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {trip.status === 'scheduled' && (
                  <>
                    <button
                      onClick={() => handleUpdateStatus('in_progress')}
                      className="btn btn-success"
                      disabled={updating}
                    >
                      🚀 Iniciar Viaje
                    </button>
                    <button
                      onClick={handleDelete}
                      className="btn btn-danger"
                      disabled={updating}
                    >
                      ❌ Cancelar Viaje
                    </button>
                  </>
                )}

                {trip.status === 'in_progress' && (
                  <button
                    onClick={() => handleUpdateStatus('completed')}
                    className="btn btn-success"
                    disabled={updating}
                  >
                    ✓ Completar Viaje
                  </button>
                )}
              </div>
            </div>
          )}

          {/* Add Passenger Section */}
          {trip.status === 'scheduled' && trip.available_seats > 0 && !isOwner && (
            <div className="border-t pt-6">
              <button
                onClick={() => setShowPassengerForm(!showPassengerForm)}
                className="btn btn-primary w-full"
              >
                {showPassengerForm ? 'Ocultar Formulario' : '+ Reservar Asiento'}
              </button>

              {showPassengerForm && (
                <form onSubmit={handleAddPassenger} className="mt-4 bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-semibold mb-3">Datos del Pasajero</h4>
                  
                  <div className="mb-3">
                    <label className="label">Nombre Completo</label>
                    <input
                      type="text"
                      className="input"
                      value={passengerData.name}
                      onChange={(e) => setPassengerData({...passengerData, name: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className="mb-3">
                    <label className="label">Teléfono</label>
                    <input
                      type="tel"
                      className="input"
                      value={passengerData.phone}
                      onChange={(e) => setPassengerData({...passengerData, phone: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className="mb-3">
                    <label className="label">Número de Asientos</label>
                    <input
                      type="number"
                      min="1"
                      max={trip.available_seats}
                      className="input"
                      value={passengerData.seats_reserved}
                      onChange={(e) => setPassengerData({...passengerData, seats_reserved: parseInt(e.target.value)})}
                      required
                    />
                  </div>

                  <div className="bg-white p-3 rounded mb-3">
                    <p className="text-sm text-gray-700">
                      <strong>Total a pagar:</strong> ${(trip.price * passengerData.seats_reserved).toLocaleString('es-CO')}
                    </p>
                  </div>
                  
                  <div className="flex gap-2">
                    <button 
                      type="submit" 
                      className="btn btn-success flex-1" 
                      disabled={updating}
                    >
                      {updating ? 'Reservando...' : 'Confirmar Reserva'}
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowPassengerForm(false)}
                      className="btn btn-secondary"
                    >
                      Cancelar
                    </button>
                  </div>
                </form>
              )}
            </div>
          )}

          {/* Rating Section */}
          {trip.status === 'completed' && !isOwner && (
            <div className="border-t pt-6">
              <button
                onClick={() => setShowRatingForm(!showRatingForm)}
                className="btn btn-warning w-full"
              >
                {showRatingForm ? 'Ocultar' : '⭐ Calificar Viaje'}
              </button>

              {showRatingForm && (
                <form onSubmit={handleRateTrip} className="mt-4 bg-yellow-50 p-4 rounded-lg">
                  <h4 className="font-semibold mb-3">Califica tu experiencia</h4>
                  
                  <div className="mb-4">
                    <div className="flex justify-center items-center gap-2 mb-2">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <button
                          key={star}
                          type="button"
                          onClick={() => setRating(star)}
                          className={`text-4xl transition ${
                            star <= rating ? 'text-yellow-500' : 'text-gray-300'
                          }`}
                        >
                          ★
                        </button>
                      ))}
                    </div>
                    <p className="text-center text-gray-700 font-semibold">
                      {rating} de 5 estrellas
                    </p>
                  </div>
                  
                  <div className="flex gap-2">
                    <button 
                      type="submit" 
                      className="btn btn-success flex-1" 
                      disabled={updating}
                    >
                      {updating ? 'Enviando...' : 'Enviar Calificación'}
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowRatingForm(false)}
                      className="btn btn-secondary"
                    >
                      Cancelar
                    </button>
                  </div>
                </form>
              )}
            </div>
          )}
        </div>

        {/* Additional Info */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="card bg-blue-50 border border-blue-200">
            <h4 className="font-semibold text-blue-900 mb-2">ℹ️ Información</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>• Creado: {formatDate(trip.createdAt)}</li>
              <li>• Última actualización: {formatDate(trip.updatedAt)}</li>
              <li>• Estado: {STATUS_LABELS[trip.status]}</li>
            </ul>
          </div>

          {trip.status === 'scheduled' && (
            <div className="card bg-green-50 border border-green-200">
              <h4 className="font-semibold text-green-900 mb-2">💡 Recordatorio</h4>
              <ul className="text-sm text-green-800 space-y-1">
                <li>• Llega 10 minutos antes de la salida</li>
                <li>• Verifica que tengas espacio suficiente</li>
                <li>• Mantén tu teléfono encendido</li>
                <li>• Respeta los acuerdos pactados</li>
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TripDetail;

src/pages/Trips.jsx

import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { tripApi } from '../api/tripApi';
import { STATUS_COLORS, STATUS_LABELS } from '../utils/constants';

const Trips = () => {
  const [trips, setTrips] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    loadTrips();
  }, [filter]);

  const loadTrips = async () => {
    setLoading(true);
    try {
      const filters = filter !== 'all' ? { status: filter } : {};
      const response = await tripApi.getAll(filters);
      setTrips(response.data);
    } catch (error) {
      console.error('Error loading trips:', error);
      alert('Error al cargar los viajes');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('¿Estás seguro de cancelar este viaje?')) return;

    try {
      await tripApi.delete(id);
      alert('Viaje cancelado exitosamente');
      loadTrips();
    } catch (error) {
      alert('Error al cancelar el viaje');
    }
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString('es-CO', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">Cargando viajes...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Viajes Disponibles
            </h1>
            <p className="text-gray-600">
              {trips.length} viaje{trips.length !== 1 ? 's' : ''} encontrado{trips.length !== 1 ? 's' : ''}
            </p>
          </div>
          <Link to="/create-trip" className="btn btn-primary">
            + Crear Viaje
          </Link>
        </div>

        {/* Filters */}
        <div className="card mb-6">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setFilter('all')}
              className={`px-4 py-2 rounded-lg font-semibold transition ${
                filter === 'all' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Todos
            </button>
            <button
              onClick={() => setFilter('scheduled')}
              className={`px-4 py-2 rounded-lg font-semibold transition ${
                filter === 'scheduled' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Programados
            </button>
            <button
              onClick={() => setFilter('in_progress')}
              className={`px-4 py-2 rounded-lg font-semibold transition ${
                filter === 'in_progress' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              En Progreso
            </button>
            <button
              onClick={() => setFilter('completed')}
              className={`px-4 py-2 rounded-lg font-semibold transition ${
                filter === 'completed' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Completados
            </button>
            <button
              onClick={() => setFilter('cancelled')}
              className={`px-4 py-2 rounded-lg font-semibold transition ${
                filter === 'cancelled' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Cancelados
            </button>
          </div>
        </div>

        {/* Trips Grid */}
        {trips.length === 0 ? (
          <div className="card text-center py-12">
            <div className="text-6xl mb-4">🚗</div>
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              No hay viajes disponibles
            </h3>
            <p className="text-gray-500 mb-4">
              {filter !== 'all' 
                ? `No hay viajes con estado "${STATUS_LABELS[filter]}"`
                : 'Sé el primero en crear un viaje'
              }
            </p>
            {filter === 'all' && (
              <Link to="/create-trip" className="btn btn-primary">
                Crear Primer Viaje
              </Link>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {trips.map((trip) => (
              <div key={trip._id} className="card hover:shadow-lg transition">
                {/* Header */}
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      {trip.origin} → {trip.destination}
                    </h3>
                    <p className="text-sm text-gray-500">
                      Conductor: {trip.driver_id?.name || 'N/A'}
                    </p>
                  </div>
                  <span className={`badge ${STATUS_COLORS[trip.status]}`}>
                    {STATUS_LABELS[trip.status]}
                  </span>
                </div>

                {/* Details */}
                <div className="space-y-2 mb-4">
                  <div className="flex items-center text-gray-700">
                    <span className="mr-2">📅</span>
                    <span className="text-sm">{formatDate(trip.departure_time)}</span>
                  </div>
                  
                  <div className="flex items-center text-gray-700">
                    <span className="mr-2">💰</span>
                    <span className="text-sm font-semibold">
                      ${trip.price.toLocaleString('es-CO')}
                    </span>
                  </div>
                  
                  <div className="flex items-center text-gray-700">
                    <span className="mr-2">👥</span>
                    <span className="text-sm">
                      {trip.available_seats} asientos disponibles
                    </span>
                  </div>

                  {trip.distance_km && (
                    <div className="flex items-center text-gray-700">
                      <span className="mr-2">📍</span>
                      <span className="text-sm">{trip.distance_km} km</span>
                    </div>
                  )}

                  {trip.duration_minutes && (
                    <div className="flex items-center text-gray-700">
                      <span className="mr-2">⏱️</span>
                      <span className="text-sm">{trip.duration_minutes} min</span>
                    </div>
                  )}
                </div>

                {/* Passengers */}
                {trip.passengers && trip.passengers.length > 0 && (
                  <div className="mb-4 pb-4 border-t pt-4">
                    <h4 className="font-semibold text-sm text-gray-700 mb-2">
                      Pasajeros ({trip.passengers.length}):
                    </h4>
                    <div className="space-y-1">
                      {trip.passengers.map((passenger, index) => (
                        <div key={index} className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                          👤 {passenger.name} - {passenger.seats_reserved} asiento{passenger.seats_reserved > 1 ? 's' : ''}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Actions */}
                <div className="flex gap-2">
                  <Link
                    to={`/trips/${trip._id}`}
                    className="btn btn-primary flex-1 text-center"
                  >
                    Ver Detalles
                  </Link>
                  
                  {trip.status === 'scheduled' && (
                    <button
                      onClick={() => handleDelete(trip._id)}
                      className="btn btn-danger"
                    >
                      Cancelar
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Trips;

src/utils/axios.js
import axios from 'axios';
import { API_URL } from './constants';

const axiosInstance = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para agregar token a todas las peticiones
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor para manejar errores de respuesta
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('driver');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;

src/utils/constants.js

export const API_URL = import.meta.env.VITE_API_URL || 'https://proyectoelectiva-pyl0.onrender.com/api';

export const TRIP_STATUS = {
  SCHEDULED: 'scheduled',
  IN_PROGRESS: 'in_progress',
  COMPLETED: 'completed',
  CANCELLED: 'cancelled'
};

export const DRIVER_STATUS = {
  AVAILABLE: 'available',
  BUSY: 'busy',
  OFFLINE: 'offline'
};

export const STATUS_LABELS = {
  scheduled: 'Programado',
  in_progress: 'En Progreso',
  completed: 'Completado',
  cancelled: 'Cancelado'
};

export const STATUS_COLORS = {
  scheduled: 'badge-blue',
  in_progress: 'badge-yellow',
  completed: 'badge-green',
  cancelled: 'badge-red'
};

App.jsx
import { Route, BrowserRouter as Router, Routes } from 'react-router-dom';
import Navbar from './components/Navbar';
import ProtectedRoute from './components/ProtectedRoute';
import { AuthProvider } from './context/AuthContext';

// Pages
import CreateTrip from './pages/CreateTrip';
import Dashboard from './pages/Dashboard';
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import Statistics from './pages/Statistics';
import TripDetail from './pages/TripDetail';
import Trips from './pages/Trips';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-gray-50">
          <Navbar />
          <Routes>
            {/* Public Routes */}
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />

            {/* Protected Routes */}
            <Route
              path="/dashboard"
              element={
                <ProtectedRoute>
                  <Dashboard />
                </ProtectedRoute>
              }
            />
            <Route
              path="/trips"
              element={
                <ProtectedRoute>
                  <Trips />
                </ProtectedRoute>
              }
            />
            <Route
              path="/trips/:id"
              element={
                <ProtectedRoute>
                  <TripDetail />
                </ProtectedRoute>
              }
            />
            <Route
              path="/create-trip"
              element={
                <ProtectedRoute>
                  <CreateTrip />
                </ProtectedRoute>
              }
            />
            <Route
              path="/statistics"
              element={
                <ProtectedRoute>
                  <Statistics />
                </ProtectedRoute>
              }
            />

            {/* 404 */}
            <Route
              path="*"
              element={
                <div className="min-h-screen flex items-center justify-center">
                  <div className="text-center">
                    <h1 className="text-6xl font-bold text-gray-300 mb-4">404</h1>
                    <p className="text-xl text-gray-600 mb-4">Página no encontrada</p>
                    <a href="/" className="btn btn-primary">
                      Volver al Inicio
                    </a>
                  </div>
                </div>
              }
            />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

index.css
/* src/index.css */
@import "tailwindcss";

@theme {
  --color-primary: #3b82f6;
  --color-secondary: #8b5cf6;
  --color-success: #10b981;
  --color-danger: #ef4444;
  --color-warning: #f59e0b;
}

@layer base {
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg font-semibold transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-700 hover:bg-gray-300 active:bg-gray-400;
  }
  
  .btn-success {
    @apply bg-green-600 text-white hover:bg-green-700 active:bg-green-800;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white hover:bg-red-700 active:bg-red-800;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-md p-6 transition-shadow;
  }
  
  .input {
    @apply w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all;
  }
  
  .label {
    @apply block text-sm font-medium text-gray-700 mb-2;
  }

  .badge {
    @apply inline-block px-3 py-1 rounded-full text-xs font-semibold;
  }
  
  .badge-blue {
    @apply bg-blue-100 text-blue-800;
  }
  
  .badge-yellow {
    @apply bg-yellow-100 text-yellow-800;
  }
  
  .badge-green {
    @apply bg-green-100 text-green-800;
  }
  
  .badge-red {
    @apply bg-red-100 text-red-800;
  }
}